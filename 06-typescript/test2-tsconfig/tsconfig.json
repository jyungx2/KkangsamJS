{
  "compilerOptions": {
    // 컴파일 시킨 산출물(js파일)을 만들 디렉토리 위치..
    // 💫 js파일과 ts파일이 같이 있으면 구분하기 힘들기 때문에 밖에다 만들어달라는 뜻?..
    "outDir": "./build/",

    // 💫 compile 대상에 ts뿐만 아니라 js까지 포함시킬까?
    // > true - 개발자가 작성한 js파일이 ES6인 경우 포함시켜라
    // 현존하는 브라우저 중에서 아직 ES6을 지원하지 못하는 브라우저가 있을 수 있고, 그 브라우저에서도 정상적으로 동작하게 하려면..
    // ES6 -> ES5 코드로 변형시켜서 전체 브라우저에 동작하게..
    "allowJs": true,
    // 💫 자바스크립트 모듈화 방식이 2가지..
    // ES6 스타일의 모듈과 방법이 있고 commonjs(과거에 사용되었던) 방식이 있는데, true로 설정 시, 둘의 호환성 제공 ✅
    "esModuleInterop": true,
    // json 파일을 마치 코드에서 객체로 바로 이용 가능하게..
    "resolveJsonModule": true,
    // 💫 ts -> js로 컴파일 시킬 때.. js.map파일을 자동으로 만들어 달라..
    // 개발자가 분석할 파일은 아니지만, 디버깅을 위해서 만들어 주는게 좋다..
    // 런타임시에는 Js가 실행, 런타임 에러가 발생하면 어디에서 에러가 발생했는지 js라인수가 나온다.
    // 우리가 개발하고 우리가 유지보수하는 파일은 Js가 아니라, ts이다.
    // 💫 런타임 에러가 발생했을 때, 에러 위치를 ts코드위치로 알려줘야 유지보수가 편하다.
    // 이 둘간의 관계를 유지하는 파일이 Map, 이 Map파일이 있어야 Ts위치로 알려준다.
    "sourceMap": true,
    // 💫 any타입을 허용할 것인가의 설정..
    // any - 아무 타입이나 다 컴파일시에 통과시켜주겠다는 게 false..
    // 권장하지 않기 때문에 false.
    "noImplicitAny": true,
    // 💫 컴파일된 Js코드를 es5 스타일로? es6 스타일로?
    // 아직도 몇몇 브라우저에서는 es5까지밖에 지원이 안돼서 이 코드를 쓴다고 한다.
    "target": "es5",
    // 💫 jsx구문을 어느 형태의 Js로 변형시킬까? 대부분 react 스타일로 변형시킨다..
    "jsx": "react",
    // 💫 모듈화 방식.. target과 맞추어서 target에서 es5로 하면 commonJS, es6이면 이곳도 es6
    "module": "CommonJS"
  },
  // 💫 transpile 시킬 대상인 폴더 파일
  // src에 있는 폴더에 서브 폴더 어디가 됐든(/**), 거기에 있는 모든 파일(/*)
  "include": ["src/**/*.ts"],
  // 💫 include에 있는 파일 중에 제외시킬 파일들..
  "exclude": ["node_modules", "**/*.spec.ts"]
  // 👉 총정리: src에 있는 모든 파일을 이 파일을 제외하고, 트랜스파일 시켜서 outDir에 만들어달라는 뜻..
}
