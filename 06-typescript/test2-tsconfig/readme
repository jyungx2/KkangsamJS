// npm: node.js의 명령어이자, package(라이브러리) 관리 툴..
// => package 설치, 삭제, 업데이트하기 위한 목적으로 사용

// package.json: npm 환경파일(npm이 어떤식으로 동작하는지 서술해놓은 환경파일) or 프로젝트 설정파일(프로젝트 전체가 npm에 의해 관리되므로..)
// npm init으로 초기화시키는 순간, 그 파일은 npm에 의해 관리되어야 한다는 뜻이므로, npm 환경파일에 해당하는 package.json파일이 자동으로 생성됨.

// npm으로 관리되는 프로젝트를 초기화
// npm init에 의해 자동으로 Package.json이 하나 만들어진다..

// 예를 들어, test2-tsconfig파일 전체를 npm 명령으로 관리하려면, npm을 관리하는데 필요한 환경파일에 해당하는 package.json파일(프로젝트 설정파일)이 만들어져 있어야 하기 때문에 다음 명령을 먼저 실행.

> npm init
> package name: (test2-tsconfig)
> // : 패키지 네임을 ()로 해줄까? 아니면 너가 직접 정해.
> version: (1.0.0)
> description:
> entry point: (index.js)
> .......

=> 모두 다 엔터쳐서 기본값으로 설정하자~!
node.js 설치 후 사용하게 될 명령어 3개

1. node: JS 실행 => back-end에서 자바스크립트 실행해줘야 하기 때문에 프론트가 아닌, 백엔드쪽에서 활용 => 프론트 개발자가 Node.js를 까는 이유는, node가 아닌, npm, npx를 활용하기 위해서..
<!-- <개발자 tool> -->
2. npm: node package manager(패키지/프로젝트 관리)
3. npx:

// 터미널() 명령은 CLI (Conmman Line Interface) 환경에서 ..

- 프로젝트 생성
- 제거/업데이트
- 실행

// package.json내에 가장 중요한 환경설정은 프로젝트에 쓰이는 라이브러리!!
// 이것을 package 또는 그냥 라이브러리(lib)라고 부른다.
// 필요한 lib or tool 다운로드..
// npm install xxx - npm repository server로부터 xxx패키지를 다운로드 받는 명령어..
(ex) npm i(nstall) axios
(ex) npm i jquery
=> "dependencies": {} 부분에 키-밸류 형식으로 생성됨.
// ❓ 얘네들이 꼭 package.json파일에 기록되어야 하는 이유??
// 팀원들끼리 한 프로젝트를 공유해야 할 때, 선임개발자가 공개한 package.json파일을 다운받아서 npm install을 하면, 완전히 똑같은 파일을 내려받을 수 있어서 버전다름으로 인한 충돌가능성을 막을 수 있다.
// 여기서 Node.modules는 팀원끼리 공유할 필요 없다?.. 안에 너무 많은 파일이 속해있어서...하나하나 언제 받냐...?
// 어쩄든 우리가 프로젝트 상에서 사용한 모든 라이브러리를 기록한 파일이 Package.json파일이고, 우리는 이걸 중요하게 유지해야할 필요성 있다!!

> npm install -D typescript

- -D: library가 아니라 tool이라는 뜻.
- typescript: package 이름

// 📌 https://www.npmjs.com/
// 이곳에서 온갖(프론트엔드+백엔드)의 라이브러리의 토탈 레파지토리..

// tsconfig.json (ts환경파일) 준비.. (위에서 배운 package.json파일은 전체? 환경파일?..)

> npx tsc -init
> // tsconfig.json파일이 즉시 생성됨!
> // 이 파일 안에는 무진장 많은 라이브러리들이 포함되어 있음..
> // 이거 다 쓰지도 못하고, 주석으로 너무 더럽게 써져 있어서 다 지울것임
> // 다 지우고 {}

// 가장 마지막 수업 내용
// tsc로.. transpile

> npx tsc
