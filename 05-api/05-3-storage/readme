; // 1. 세션 스토리지 vs 로컬 스토리지
; // 세션 스토로지는 = 여러 창이어도, 동일 오리진끼리만 저장 가능
; // 영속적❌ 창이 닫히면 세션 스토리지는 사라짐
; // <-> 로컬 스토리지..

; // 2. key - value 관계로 데이터가 저장되는데, 모두 다 문자열로 저장됨..
; // - json.stringify() - 문자열로 변환
; // - JSON.parse() - 객체로 변환


; // 3. 어디에선가 storage에 있는 데이터를 추가/변경/삭제
; // 하나의 html안에서만 쓰는게 아니라, 여러 html간의 데이터의 이동이 필수불가결, a html에서 데이터를 변경하거나 삭제했으면, b html에서도 이걸 반영해야 하므로,,, 이걸 이벤트리스너를 이용해
; // 추가삭제변경 이벤트가 발생했을 때, 그 이벤트로 인해 변경된 사항이 반영될 수 있도록... => "storage event"
; // *이때, 스토리지 데이터를 변경시킨 브라우저 창(a html)에서는 이벤트가 발생하지 않기 때문에 이벤트리스너를 걸어줘봤자 작동❌
; // 이때, 스토리지는 로컬 스토리지일 때만 해당!!

; // session storage경우는, 동일 오리진의 브라우저 창이 여러개 있다고 해도 부라우저 창별로 sessionStorage객체가 따로 유지되기 때문에, 다른 브라우저 창의 세션 스토리지 데이터 변경 이벤트를 감지할 수 없다. => 그럼 굳이 세션 스토리지는 이벤트가 의미가 없지 않나?
; // 단 한가지 경우만 예외다...... "<iframe>"
; // 물리적인 브라우저창은 하나지만 이 곳에 뜨는 html은 여러개 뜨는 <iframe>의 경우, session storage가 유효(?)

; // storage 이벤트가 발생하게 되면 이벤트 콜백함수의 매개변수로 storageEvent 객체가 전달되는데, 이 객체의 프라퍼티로 이벤트와 관련된 다양한 정보를 활용 가능.
; // : key / newValue / oldValue / storageArea(변경된 스토리지 객체) - localstorage or sessionstorage / url